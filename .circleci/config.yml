version: 2.1
orbs:
    node: circleci/node@4.2.0

jobs:
    build-frontend:
        working_directory: "~/project"
        executor:
            name: node/default
            tag: "14.16.0"
        steps:
            - checkout
            - run:
                  name: Create `.npmrc` file
                  working_directory: client
                  command: |
                      touch .npmrc
                      echo //npm.fontawesome.com/:_authToken=${FA_KEY} >> .npmrc
                      echo @fortawesome:registry=https://npm.fontawesome.com/ >> .npmrc
                      echo /npm.greensock.com/:_authToken=${GS_KEY} >> .npmrc
                      echo @gsap:registry=https://npm.greensock.com >> .npmrc
            - node/install-packages:
                  app-dir: "~/project/client"
                  override-ci-command: npm install
                  cache-version: v2
            - run:
                  name: Audit frontend packages
                  working_directory: client
                  command: npm audit
            - run:
                  name: Test frontend code
                  working_directory: client
                  command: npm test
            - run:
                  name: Build frontend modules
                  working_directory: client
                  command: npm run build:all
            - run:
                  name: Destroy `etc` and `node_modules` folder
                  working_directory: client
                  command: |
                      rm _etc -r
                      rm node_modules -rf
            - run:
                  name: Destroy `src` folders
                  working_directory: client
                  command: rm **/src -rf
            - persist_to_workspace:
                  root: /test
                  paths:
                      - client
                      - .circleci

    build-backend:
        working_directory: "~/project"
        executor:
            name: node/default
            tag: "14.16.0"
        steps:
            - checkout
            - run:
                  name: Attach environment variables
                  command: |
                      cd server
                      echo ENVIRONMENT=production > ".env"
            - node/install-packages:
                  app-dir: "~/project/server"
                  override-ci-command: npm install
            - run:
                  name: Audit backend packages
                  working_directory: server
                  command: npm audit
            - run:
                  name: Test backend code
                  working_directory: server
                  command: npm test
            - run:
                  name: Destroy `node_modules` folder
                  working_directory: server
                  command: rm node_modules -rf
            -  persist_to_workspace:
                   root: /test
                   paths:
                       - server

    deploy-app:
        working_directory: "~/project"
        docker:
            - image: cimg/base:2020.01
        steps:
            - attach_workspace:
                  at: /test
            - add_ssh_keys:
                  fingerprints: [ "e2:1c:76:aa:29:61:db:ca:a1:d3:c2:59:c6:0c:b1:b9" ]
            - run:
                  name: Configure environment file
                  command: |
                      echo ENVIRONMENT=production > "server/.env"
                      exit 0
            - deploy:
                  name: Deploy the application
                  no_output_timeout: 30m
                  command: |
                      sudo apt update --yes
                      sudo apt install software-properties-common --yes
                      sudo apt-add-repository --yes --update ppa:ansible/ansible --yes
                      sudo apt install ansible --yes
                      cd .circleci/ansible
                      ls -la
                      ansible-playbook -i inventory.txt playbook.yml

workflows:
    test_my_app:
        jobs:
            - build-frontend
            - build-backend
            - deploy-app:
                  filters:
                      branches:
                          only: master
                  requires:
                      - build-frontend
                      - build-backend
