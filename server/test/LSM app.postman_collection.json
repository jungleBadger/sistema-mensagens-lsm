{
	"info": {
		"_postman_id": "e775f477-3c93-40a7-a05a-60598d09989b",
		"name": "LSM app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Get logged user info as not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response object has no properties\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid parameters - no email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid parameters - no password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid parameters - < 8 characters length password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Has the correct error string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Invalid input - failing fast.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid credentials - bad email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Has the correct error string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"User email xx@txxest.com not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"xx@txxest.com\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid credentials - bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with valid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get logged user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has ID property\", function () {\r",
									"    pm.expect(pm.response.json().id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isAdmin property\", function () {\r",
									"    pm.expect(pm.response.json().isAdmin).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isConfirmed property\", function () {\r",
									"    pm.expect(pm.response.json().isConfirmed).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin user",
			"item": [
				{
					"name": "Fail-fast",
					"item": [
						{
							"name": "Block requests without `email` property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Missing required properties for creating admin User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Block requests without `rawPassword` property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Missing required properties for creating admin User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Block requests with `rawPassword` property containing less than 08 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Valid error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Password has to have a length greater or equal to 08.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create admin user",
					"item": [
						{
							"name": "Create user without `displayName`",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"firstAdminUserId\", JSON.parse(responseBody).ID);\r",
											"pm.collectionVariables.set(\"firstAdminUserEmail\", JSON.parse(responseBody).EMAIL);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with `displayName`",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"secondAdminUserId\", JSON.parse(responseBody).ID);\r",
											"pm.collectionVariables.set(\"secondAdminUserEmail\", JSON.parse(responseBody).EMAIL);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\",\r\n    \"displayName\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all admin users",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the offset property\", function () {\r",
											"    pm.expect(pm.response.json().offset).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the orderBy property\", function () {\r",
											"    pm.expect(pm.response.json().orderBy).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the orderBy property\", function () {\r",
											"    pm.expect(pm.response.json().results.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all users with limit and skip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the offset property\", function () {\r",
											"    pm.expect(pm.response.json().offset).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the orderBy property\", function () {\r",
											"    pm.expect(pm.response.json().orderBy).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the orderBy property\", function () {\r",
											"    pm.expect(pm.response.json().results.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user?limit=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete admin user",
					"item": [
						{
							"name": "Delete previously created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct confirmation message\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(`User ${pm.variables.get(\"firstAdminUserId\")} deleted.`);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/{{firstAdminUserId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										"{{firstAdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previously created user two",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct confirmation message\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(`User ${pm.variables.get(\"secondAdminUserId\")} deleted.`);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/{{secondAdminUserId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										"{{secondAdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete unexistent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"User ID -1 not found.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										"-1"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"firstNewdminEmail\", pm.variables.replaceIn(\"{{$$randomEmail}}\"));",
							"pm.collectionVariables.set(\"secondNewAdminEmail\", pm.variables.replaceIn(\"{{$$randomEmail}}\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "Get logged user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has ID property\", function () {\r",
									"    pm.expect(pm.response.json().id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isAdmin property\", function () {\r",
									"    pm.expect(pm.response.json().isAdmin).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isConfirmed property\", function () {\r",
									"    pm.expect(pm.response.json().isConfirmed).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Logout message\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Logged out.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get logged user info as not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response object has no properties\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "98df41fa-e11a-4449-97af-069c1482b25b",
			"key": "host",
			"value": "https://localhost:3030"
		},
		{
			"id": "2e74bfe2-329e-4f40-874c-3679f911ee65",
			"key": "validAdminUser",
			"value": "txexsxt@txxest.com"
		},
		{
			"id": "dea14b21-934e-4fcb-9654-70415190c1f2",
			"key": "validAdminUserPassword",
			"value": "12345678"
		},
		{
			"id": "c0ed0899-568d-49bd-973b-1cfd387b624c",
			"key": "newAdminEmail",
			"value": ""
		},
		{
			"id": "a2c05618-a118-4921-a2dc-3f736ff89487",
			"key": "firstNewdminEmail",
			"value": ""
		},
		{
			"id": "9290fb49-a581-40fa-b86e-bd509f56fe6f",
			"key": "secondNewAdminEmail",
			"value": ""
		},
		{
			"id": "3835278a-c6d8-4524-9a37-9fc64386969d",
			"key": "firstAdminUserId",
			"value": ""
		},
		{
			"id": "4cf4a2ed-a087-4652-867f-f16b8b81ea1f",
			"key": "firstAdminUserEmail",
			"value": ""
		},
		{
			"id": "3e1ee761-1746-4858-aa52-5abf9606ca14",
			"key": "secondAdminUserId",
			"value": ""
		},
		{
			"id": "d71be911-b973-4f6b-aff2-8f177db763d7",
			"key": "secondAdminUserEmail",
			"value": ""
		}
	]
}