{
	"info": {
		"_postman_id": "e775f477-3c93-40a7-a05a-60598d09989b",
		"name": "LSM app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login with invalid parameters - no email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid parameters - no password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid parameters - < 8 characters length password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Has the correct error string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Invalid input - failing fast.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid credentials - bad email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Has the correct error string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"User email xx@txxest.com not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"xx@txxest.com\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid credentials - bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with valid credentials - admin redirect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with valid credentials - rest response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response text has the expected value\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql('{\"redirectPath\":\"/\"}');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{validAdminUser}}\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login?rest",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							],
							"query": [
								{
									"key": "rest",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get logged user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has ID property\", function () {\r",
									"    pm.expect(pm.response.json().id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isAdmin property\", function () {\r",
									"    pm.expect(pm.response.json().isAdmin).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isConfirmed property\", function () {\r",
									"    pm.expect(pm.response.json().isConfirmed).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin User",
			"item": [
				{
					"name": "Fail-fast",
					"item": [
						{
							"name": "Block requests without `email` property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Missing required properties for creating admin User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Block requests without `rawPassword` property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Missing required properties for creating admin User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Block requests with `rawPassword` property containing less than 08 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Valid error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Password has to have a length greater or equal to 08.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create admin user",
					"item": [
						{
							"name": "Validate if the route is protected - admins only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user without `displayName`",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.collectionVariables.set(\"firstAdminUserId\", response.ID);\r",
											"pm.collectionVariables.set(\"firstAdminUserEmail\", response.EMAIL);\r",
											"pm.collectionVariables.set(\"firstAdminUserLogId\", response.LOG_ID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "First creation log was generated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected mdoel\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"firstAdminUserLogId\"));\r",
											"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"firstAdminUserId\"));\r",
											"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"USUARIO\");\r",
											"    pm.expect(response.ACAO).to.eql(\"CREATE\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/logs/{{firstAdminUserLogId}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"logs",
										"{{firstAdminUserLogId}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with `displayName`",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"secondAdminUserId\", response.ID);\r",
											"pm.collectionVariables.set(\"secondAdminUserEmail\", response.EMAIL);\r",
											"pm.collectionVariables.set(\"secondAdminUserLogId\", response.LOG_ID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\",\r\n    \"displayName\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Second creation log was generated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected mdoel\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"secondAdminUserLogId\"));\r",
											"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"secondAdminUserId\"));\r",
											"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"USUARIO\");\r",
											"    pm.expect(response.ACAO).to.eql(\"CREATE\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/logs/{{secondAdminUserLogId}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"logs",
										"{{secondAdminUserLogId}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all admin users",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the offset property\", function () {\r",
											"    pm.expect(pm.response.json().offset).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the orderBy property\", function () {\r",
											"    pm.expect(pm.response.json().orderBy).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has more than one object\", function () {\r",
											"    pm.expect(pm.response.json().results.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all users with limit and skip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the offset property\", function () {\r",
											"    pm.expect(pm.response.json().offset).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the orderBy property\", function () {\r",
											"    pm.expect(pm.response.json().orderBy).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has only one object\", function () {\r",
											"    pm.expect(pm.response.json().results.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user?limit=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get admin user",
					"item": [
						{
							"name": "Get single admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected model\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.exist;\r",
											"    pm.expect(response.EMAIL).to.exist;\r",
											"    pm.expect(response.SENHA_REGISTRADA).to.exist;\r",
											"    pm.expect(response.EMAIL_CONFIRMADO).to.exist;\r",
											"    pm.expect(response.ADMINISTRADOR).to.exist;\r",
											"    pm.expect(response.CRIADO_EM).to.exist;\r",
											"\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"firstAdminUserId\"));\r",
											"    pm.expect(response.ADMINISTRADOR).to.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/{{firstAdminUserId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										"{{firstAdminUserId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete admin user",
					"item": [
						{
							"name": "Delete unexistent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct model\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"User ID -1 not found.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previously created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct confirmation message\", function () {\r",
											"    pm.collectionVariables.set(\"firstAdminUserDeleteLogId\", pm.response.json().LOG_ID);\r",
											"    pm.expect(pm.response.json().ID).to.eql(pm.variables.get(\"firstAdminUserId\"));\r",
											"    pm.expect(pm.response.json()).to.have.property(\"LOG_ID\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/{{firstAdminUserId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										"{{firstAdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "First deletion log was generated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected model\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"firstAdminUserDeleteLogId\"));\r",
											"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"firstAdminUserId\"));\r",
											"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"USUARIO\");\r",
											"    pm.expect(response.ACAO).to.eql(\"DELETE\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/logs/{{firstAdminUserDeleteLogId}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"logs",
										"{{firstAdminUserDeleteLogId}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previously created user two",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct confirmation message\", function () {\r",
											"    pm.collectionVariables.set(\"secondAdminUserDeleteLogId\", pm.response.json().LOG_ID);\r",
											"    pm.expect(pm.response.json().ID).to.eql(pm.variables.get(\"secondAdminUserId\"));\r",
											"    pm.expect(pm.response.json()).to.have.property(\"LOG_ID\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/user/{{secondAdminUserId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"user",
										"{{secondAdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Second deletion log was generated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected model\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"secondAdminUserDeleteLogId\"));\r",
											"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"secondAdminUserId\"));\r",
											"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"USUARIO\");\r",
											"    pm.expect(response.ACAO).to.eql(\"DELETE\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/logs/{{secondAdminUserDeleteLogId}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"logs",
										"{{secondAdminUserDeleteLogId}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"firstNewdminEmail\", pm.variables.replaceIn(\"{{$$randomEmail}}\"));",
							"pm.collectionVariables.set(\"secondNewAdminEmail\", pm.variables.replaceIn(\"{{$$randomEmail}}\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Brother",
			"item": [
				{
					"name": "Add brother",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.collectionVariables.set(\"brotherId\", response.ID);\r",
									"pm.collectionVariables.set(\"brotherLogId\", response.LOG_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"displayName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/brother/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"brother",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "First creation log was generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected mdoel\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.ID).to.eql(pm.variables.get(\"brotherLogId\"));\r",
									"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"brotherId\"));\r",
									"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"IRMAO\");\r",
									"    pm.expect(response.ACAO).to.eql(\"CREATE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/logs/{{brotherLogId}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logs",
								"{{brotherLogId}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get brother by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected model\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.ID).to.eql(pm.variables.get(\"brotherId\"));\r",
									"\r",
									"    pm.expect(response.NOME_EXIBICAO).to.exist\r",
									"    pm.expect(response.CRIADO_EM).to.exist\r",
									"    pm.expect(response.ATUALIZADO_EM).to.exist\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/brother/{{brotherId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"brother",
								"{{brotherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all brothers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected model\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.offset).to.exist\r",
									"    pm.expect(response.orderBy).to.exist\r",
									"    pm.expect(response.results).to.exist\r",
									"\r",
									"    pm.expect(Array.isArray(response.results)).to.eql(true);\r",
									"    pm.expect(response.results.length >= 1).to.eql(true);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/brother/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"brother",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update brother",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.collectionVariables.set(\"brotherId\", response.ID);\r",
									"pm.collectionVariables.set(\"brotherLogId\", response.LOG_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"displayName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/brother/{{brotherId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"brother",
								"{{brotherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "First update log was generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected mdoel\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.ID).to.eql(pm.variables.get(\"brotherLogId\"));\r",
									"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"brotherId\"));\r",
									"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"IRMAO\");\r",
									"    pm.expect(response.ACAO).to.eql(\"UPDATE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/logs/{{brotherLogId}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logs",
								"{{brotherLogId}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete brother",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.collectionVariables.set(\"brotherLogId\", response.LOG_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/brother/{{brotherId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"brother",
								"{{brotherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "First delete log was generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected mdoel\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.ID).to.eql(pm.variables.get(\"brotherLogId\"));\r",
									"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"brotherId\"));\r",
									"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"IRMAO\");\r",
									"    pm.expect(response.ACAO).to.eql(\"DELETE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/logs/{{brotherLogId}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logs",
								"{{brotherLogId}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Add category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.collectionVariables.set(\"categoryId\", response.ID);\r",
									"pm.collectionVariables.set(\"categoryLogId\", response.LOG_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomJobType}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/category/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "First creation log was generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected mdoel\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.ID).to.eql(pm.variables.get(\"categoryLogId\"));\r",
									"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"categoryId\"));\r",
									"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"CATEGORIA\");\r",
									"    pm.expect(response.ACAO).to.eql(\"CREATE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/logs/{{categoryLogId}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logs",
								"{{categoryLogId}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected model\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.ID).to.eql(pm.variables.get(\"categoryId\"));\r",
									"\r",
									"    pm.expect(response.NOME).to.exist\r",
									"    pm.expect(response.CRIADO_EM).to.exist\r",
									"    pm.expect(response.ATUALIZADO_EM).to.exist\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/category/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected model\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.offset).to.exist\r",
									"    pm.expect(response.orderBy).to.exist\r",
									"    pm.expect(response.results).to.exist\r",
									"\r",
									"    pm.expect(Array.isArray(response.results)).to.eql(true);\r",
									"    pm.expect(response.results.length >= 1).to.eql(true);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/category/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.collectionVariables.set(\"categoryId\", response.ID);\r",
									"pm.collectionVariables.set(\"categoryLogId\", response.LOG_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/category/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "First update log was generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected mdoel\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.ID).to.eql(pm.variables.get(\"categoryLogId\"));\r",
									"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"categoryId\"));\r",
									"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"CATEGORIA\");\r",
									"    pm.expect(response.ACAO).to.eql(\"UPDATE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/logs/{{categoryLogId}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logs",
								"{{categoryLogId}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.collectionVariables.set(\"categoryLogId\", response.LOG_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/category/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "First delete log was generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the expected mdoel\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    pm.expect(response.ID).to.eql(pm.variables.get(\"categoryLogId\"));\r",
									"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"categoryId\"));\r",
									"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"CATEGORIA\");\r",
									"    pm.expect(response.ACAO).to.eql(\"DELETE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/logs/{{categoryLogId}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logs",
								"{{categoryLogId}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Regular User",
			"item": [
				{
					"name": "Fail-fast",
					"item": [
						{
							"name": "Block requests without `email` property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Missing required properties for creating User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/regular/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"regular",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block requests with `rawPassword` property containing less than 08 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Valid error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Password has to have a length greater or equal to 08.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/regular/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"regular",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block requests without `rawPassword` property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"Missing required properties for creating User.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/regular/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"regular",
										"user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user without `displayName`",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"firstRegularUserId\", JSON.parse(responseBody).ID);\r",
											"pm.collectionVariables.set(\"firstRegularUserEmail\", JSON.parse(responseBody).EMAIL);\r",
											"pm.collectionVariables.set(\"firstRegularUserLogId\", JSON.parse(responseBody).LOG_ID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/regular/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"regular",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "First creation log was generated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected mdoel\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"firstRegularUserLogId\"));\r",
											"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"firstRegularUserId\"));\r",
											"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"USUARIO\");\r",
											"    pm.expect(response.ACAO).to.eql(\"CREATE\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/logs/{{firstRegularUserLogId}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"logs",
										"{{firstRegularUserLogId}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with `displayName`",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"secondRegularUserId\", JSON.parse(responseBody).ID);\r",
											"pm.collectionVariables.set(\"secondRegularUserEmail\", JSON.parse(responseBody).EMAIL);\r",
											"pm.collectionVariables.set(\"secondRegularUserLogId\", JSON.parse(responseBody).LOG_ID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\",\r\n    \"displayName\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/regular/user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"regular",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Second creation log was generated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected mdoel\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"secondRegularUserLogId\"));\r",
											"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"secondRegularUserId\"));\r",
											"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"USUARIO\");\r",
											"    pm.expect(response.ACAO).to.eql(\"CREATE\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/logs/{{secondRegularUserLogId}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"logs",
										"{{secondRegularUserLogId}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete regular user",
					"item": [
						{
							"name": "Delete unexistent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"User ID -1 not found.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/regular/user/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"regular",
										"user",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previously created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Correct confirmation message\", function () {\r",
											"    pm.collectionVariables.set(\"firstRegularUserDeleteLogId\", pm.response.json().LOG_ID);\r",
											"    pm.expect(pm.response.json().ID).to.eql(pm.variables.get(\"firstRegularUserId\"));\r",
											"    pm.expect(pm.response.json()).to.have.property(\"LOG_ID\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/regular/user/{{firstRegularUserId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"regular",
										"user",
										"{{firstRegularUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "First deletion log was generated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected model\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"firstRegularUserDeleteLogId\"));\r",
											"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"firstRegularUserId\"));\r",
											"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"USUARIO\");\r",
											"    pm.expect(response.ACAO).to.eql(\"DELETE\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\",\r\n    \"displayName\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/logs/{{firstRegularUserDeleteLogId}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"logs",
										"{{firstRegularUserDeleteLogId}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previously created user two",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct confirmation message\", function () {\r",
											"    pm.collectionVariables.set(\"secondRegularUserDeleteLogId\", pm.response.json().LOG_ID);\r",
											"    pm.expect(pm.response.json().ID).to.eql(pm.variables.get(\"secondRegularUserId\"));\r",
											"    pm.expect(pm.response.json()).to.have.property(\"LOG_ID\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/regular/user/{{secondRegularUserId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"regular",
										"user",
										"{{secondRegularUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Second deletion log was generated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the expected model\", function () {\r",
											"    var response = JSON.parse(responseBody);\r",
											"    pm.expect(response.ID).to.eql(pm.variables.get(\"secondRegularUserDeleteLogId\"));\r",
											"    pm.expect(response.REFERENCIA_ID).to.eql(pm.variables.get(\"secondRegularUserId\"));\r",
											"    pm.expect(response.REFERENCIA_TABELA).to.eql(\"USUARIO\");\r",
											"    pm.expect(response.ACAO).to.eql(\"DELETE\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\",\r\n    \"displayName\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/logs/{{secondRegularUserDeleteLogId}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"logs",
										"{{secondRegularUserDeleteLogId}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Logs",
			"item": [
				{
					"name": "Get logged user's logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has more than one object\", function () {\r",
									"    pm.expect(pm.response.json().length).to.greaterThan(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/logs/self",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logs",
								"self"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the offset property\", function () {\r",
									"    pm.expect(pm.response.json().offset).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the orderBy property\", function () {\r",
									"    pm.expect(pm.response.json().orderBy).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has more than one object\", function () {\r",
									"    pm.expect(pm.response.json().results.length).to.greaterThan(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/logs/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logs",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "Get logged user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has ID property\", function () {\r",
									"    pm.expect(pm.response.json().id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isAdmin property\", function () {\r",
									"    pm.expect(pm.response.json().isAdmin).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isConfirmed property\", function () {\r",
									"    pm.expect(pm.response.json().isConfirmed).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Logout message\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Logged out.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get logged user info as not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response object has no properties\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://localhost:3030"
		},
		{
			"key": "validAdminUser",
			"value": "txexsxt@txxest.com"
		},
		{
			"key": "validAdminUserPassword",
			"value": "12345678"
		},
		{
			"key": "newAdminEmail",
			"value": ""
		},
		{
			"key": "firstNewAdminEmail",
			"value": ""
		},
		{
			"key": "secondNewAdminEmail",
			"value": ""
		},
		{
			"key": "firstAdminUserId",
			"value": ""
		},
		{
			"key": "firstAdminUserEmail",
			"value": ""
		},
		{
			"key": "secondAdminUserId",
			"value": ""
		},
		{
			"key": "secondAdminUserEmail",
			"value": ""
		},
		{
			"key": "firstRegularUserId",
			"value": ""
		},
		{
			"key": "firstRegularUserEmail",
			"value": ""
		},
		{
			"key": "secondRegularUserId",
			"value": ""
		},
		{
			"key": "secondRegularUserEmail",
			"value": ""
		},
		{
			"key": "secondAdminUserLogId",
			"value": ""
		},
		{
			"key": "firstAdminUserLogId",
			"value": ""
		},
		{
			"key": "firstRegularUserLogId",
			"value": ""
		},
		{
			"key": "secondRegularUserLogId",
			"value": ""
		},
		{
			"key": "firstAdminUserDeleteLogId",
			"value": ""
		},
		{
			"key": "secondAdminUserDeleteLogId",
			"value": ""
		},
		{
			"key": "firstRegularUserDeleteLogId",
			"value": ""
		},
		{
			"key": "secondRegularUserDeleteLogId",
			"value": ""
		},
		{
			"key": "brotherId",
			"value": ""
		},
		{
			"key": "brotherLogId",
			"value": ""
		},
		{
			"key": "brotherDisplayName",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		},
		{
			"key": "categoryLogId",
			"value": ""
		},
		{
			"key": "firstNewdminEmail",
			"value": ""
		}
	]
}